---
title: "Level 1 Data Wrangling: Recreate a starwars Dataset"
---

# Objective

The objective of this assignment is to practice transforming dataset using (primarily) tidyverse functions. You will use skills like renaming and reordering columns, sorting rows, changing data types, mutating data, and using the stringr and forcats packages.

In this Level 1 Recreation assignment, you will load a built-in dataset then make changes to match the provided goal dataset. Most tasks are outlined in the assignment script. You will need to use your knowledge of the tidyverse to complete the tasks.

You may additionally or alternatively complete the [Level 2 wrangling assignment](https://github.com/nrdowling/d2mr-assessment/tree/main/01_data-cleaning/recreate-level-2). In Level 2, you will work to match a more complex dataset and perform additional transformation tasks with less direct instruction. The Level 2 assignment has more opportunities to demonstrating meeting course standards than this Level 1 assignment and is recommended for those who are already comfortable with the tasks in this assignment.

# Setup

## Loading libraries and set seed (code chunks for setting up a quarto document)

```{r}
#| label: setup
#| include: false
#| echo: true
#| message: false
#| warning: false
library(tidyverse)
set.seed(1234)
options(stringsAsFactors = FALSE)
```

## Load your goal tibble to replicate

Run this chunk to see what your end product should look like:

```{r}

#| label: load-goal-tibble

sw.wrangled.goal <- read_csv("sw-wrangled.csv") %>% 
   mutate(across(c(hair, gender, species, homeworld), factor)) # this is a quick-and-dirty fix to account for odd importing behavior

# View in console
sw.wrangled.goal 

```

Examine the structure of the df. Take note of data types and review factor levels.

```{r}

#| label: examine-structure

# Examine the structure of the df

str(sw.wrangled.goal)

# Review levels for each factor variable

## There are multiple ways to do this. Here are 3 possible options from simplest to most complex:

### 1. Use the levels() function on each factor variable
levels(sw.wrangled.goal$hair)
levels(sw.wrangled.goal$gender)
levels(sw.wrangled.goal$species)
levels(sw.wrangled.goal$homeworld)

### 2. Use the map() function from the purrr package to apply levels() to each factor variable
sw.wrangled.goal %>% 
  # Select only factor variables
  select(where(is.factor)) %>% 
  # use levels() to see the levels of each factor variable using map()
  map(levels)

### 3. Create a loop to apply levels() to each factor variable

# Extract the names of each factor variable into a vector using tidyverse functions
factor_vars <- sw.wrangled.goal %>% 
  select(where(is.factor)) %>% 
  names()

# Create an empty list to store the levels of each factor variable
factor_levels <- list()

# Create a loop to apply levels() to each factor variable
for (var in factor_vars) {
  factor_levels[[var]] <- levels(sw.wrangled.goal[[var]])
}

# View the levels of each factor variable
factor_levels
?levels
```

## Use the built-in starwars dataset to replicate the tibble above in a tbl called sw.wrangled

Start by saving the `starwars` dataset to a new tbl called `sw.wrangled`. You will then make changes to this tbl to match the goal dataset.

```{r}
#| label: load-starting-data

# Assign the starwars dataset to a new tbl called sw.wrangled
sw.wrangled <- starwars
```

QUESTION:

1.  What is the point of duplicating the `starwars` dataset to a new tbl called `sw.wrangled` rather than working directly with the `starwars` dataset?

<!-- answer below -->

<!-- Answer: the point of duplicating the `starwars` dataset to a new tbl called `sw.wrangled` is to have a clean slate to work with. This way, you can make changes to the new tbl without affecting the original dataset. You can always easily refer back to the original or start from scratch if needed. -->

# Dataset manipulation

Follow the general instructions below to transform the `sw.wrangled` dataset to match the `sw.wrangled.goal` dataset. Where possible, use `tidyverse` functions to complete the tasks.

If you get stuck, use comments to "hold space" for where you know code needs to go to achieve a goal you're not sure how to execute.

## Identify differences

Before you start making changes to the `sw.wrangled` dataset, identify the differences between the `sw.wrangled` and `sw.wrangled.goal` datasets. There are multiple ways to do this, but I suggest using the `all.equal()` function.

```{r}

#| label: identify-differences

# Use the all.equal() function to compare the two datasets
all.equal(sw.wrangled, sw.wrangled.goal)

# If the all.equal() function returns a message, read it carefully to understand the differences between the two datasets.

```

PLAN: Create a plan to address the differences between the `sw.wrangled` and `sw.wrangled.goal` datasets. What changes do you need to make? What functions will you use to make these changes?

## Recreate goal data

In this assignment, you'll make the necessary changes in individual steps in their own chunks, iteratively updating and saving `sw.wrangled`. In a real-world scenario, you would probably combine some or all of these steps into a single chunk. You'll have a chance to do that later.

**As you work,** add unique, informative chunk labels (using comment syntax: `#|: chunk-label`) and comments to explain your thought process and the steps you are taking.

```{r}

#| label: Step-by-step data wrangling

# Select only needed columns & rename height (to height_cm) and hair_color (to hair)

sw.wrangled <- sw.wrangled %>%
  select(name, height, mass, hair_color, gender, species, homeworld) %>%
  rename(height_cm = height,
         hair = hair_color)

```

```{r}

# Filter out any rows where height data is missing
sw.wrangled <- sw.wrangled %>%
  filter(!is.na(height_cm))

```

```{r}

# Break names into two columns (first_name, last_name); use first space " " as delimiter

sw.wrangled <- sw.wrangled %>%
  separate(name, into = c("first_name", "last_name"), sep = " ", extra = "merge")
  


```

```{r}
# Change categorical variables (but currently character) to factors

sw.wrangled.goal <- sw.wrangled.goal %>%
  mutate(across(where(is.character), as.factor))

#Another way is to use for loop which is much more complicated:
for (col in names(sw.wrangled)) {
  col <- as.character(col)
  if (is.character(sw.wrangled[[col]])) {
    sw.wrangled[[col]] <-as.factor(sw.wrangled[[col]])
    }
  }



```

```{r}

# Create a second height column by converting cm to inches
sw.wrangled <- sw.wrangled %>%
  mutate(height_in = height_cm*0.39370)

```

```{r}
# where there is no value in hair, use value "bald"
sw.wrangled <- sw.wrangled %>%
  mutate(hair = fct_explicit_na(hair, na_level = "bald")) 
#function in "forcats", use fct_explicit_na to create a new level for "bald" only, to facilitate its replacement with "NA"


```

```{r}

# create a logical variable that returns true if "brown" is anywhere in the string value for hair 
sw.wrangled <- sw.wrangled %>%
mutate(brown_hair = str_detect(tolower(hair), "brown"))



```

```{r}

# create an initials column by concatenating the first characters of the first and last name
sw.wrangled <- sw.wrangled %>%
  mutate(initials = if_else(
    is.na(last_name),
    str_c(str_sub(first_name,1,1), "NA"),
    str_c(str_sub(first_name,1,1), str_sub(last_name,1,1),sep = "") ))


```

```{r}

# Rearrange height_in and initials columns
sw.wrangled <- sw.wrangled %>%
  relocate(height_in, .before = height_cm) %>%
  relocate(initials, .after = last_name)


```

```{r}

# Sort by last_name and then (when last_name matches) by first_name 

sw.wrangled <- sw.wrangled %>%
  arrange(last_name, first_name)

```

## OPTIONAL: Combine steps into a single pipeline

Combine all the steps above into a single pipeline.

QUESTION: What are the advantages and disadvantages of combining all the steps into a single pipeline in a single chunk?

<!-- answer below -->

<!-- INSTRUCTOR ANSWER: With only one pipe in one chunk, you can see the entire process from start to finish. This can make it easier to understand the flow of the data manipulation and to troubleshoot any issues that arise. Having it in just one chunk also makes it easier to run the entire process at once, rather than running each step individually.-->

```{r}
#| label: single-pipe
sw.wrangled <- starwars %>%
  select(name, height, mass, hair_color, gender, species, homeworld) %>%
  rename(height_cm = height,
         hair = hair_color) %>%
  filter(!is.na(height_cm)) %>%
  separate(name, into = c("first_name", "last_name"), 
           sep = " ", extra = "merge") %>%
  mutate(across(where(is.character), as.factor)) %>%
  mutate(height_in = height_cm*0.39370) %>%
  mutate(hair = fct_explicit_na(hair, na_level = "bald")) %>%
  mutate(brown_hair = str_detect(tolower(hair), "brown")) %>%
  mutate(initials = if_else(
    is.na(last_name),
    str_c(str_sub(first_name,1,1), "NA"),
    str_c(str_sub(first_name,1,1), str_sub(last_name,1,1),sep = "") )) %>%
  relocate(height_in, .before = height_cm) %>%
  relocate(initials, .after = last_name) %>%
  arrange(last_name, first_name)
  
```

```{r}
#| label: Combine multiple mutations

sw.wrangled <- starwars %>%
  select(name, height, mass, hair_color, gender, species, homeworld) %>%
  rename(height_cm = height, hair = hair_color) %>%
  filter(!is.na(height_cm)) %>%
  separate(name, into = c("first_name", "last_name"), sep = " ", extra = "merge") %>%
  mutate(
    across(where(is.character), as.factor),
    height_in = height_cm * 0.39370,
    hair = fct_explicit_na(hair, na_level = "bald"),
    brown_hair = str_detect(tolower(hair), "brown"),
    initials = if_else(
      is.na(last_name),
      str_c(str_sub(first_name, 1, 1), "NA"),
      str_c(str_sub(first_name, 1, 1), str_sub(last_name, 1, 1), sep = "")
    )
  ) %>%
  relocate(height_in, .before = height_cm) %>%
  relocate(initials, .after = last_name) %>%
  arrange(last_name, first_name)

```

# Checkpoint

Check that your `sw.wrangled` dataframe is identical to the goal dataframe using the `all.equal()` function.

```{r}
#| label: checkpoint

# Use all.equal()
all.equal(sw.wrangled, sw.wrangled.goal)

# Turns out that there are still many dismatches:

sw.wrangled <-sw.wrangled %>%
  mutate(first_name = as.factor(first_name), 
        last_name = as.factor(last_name),
        species = as.character(species)) %>%
  mutate(gender = str_sub(gender, 1,1),
         species = str_to_upper(species))

all.equal(sw.wrangled, sw.wrangled.goal)

```

Use any returned information about mismatches to adjust your code as needed.

QUESTION: Are there any issues you cannot resolve? If so, list out the issues and any potential solutions you can think of in plain English. Go back to the chunks where the problems arise (or where you suspect they arise) and add placeholder comments.

<!-- answer below -->

Yes, there are several mismatches that I am not planning to change due to the following reasons:\

1.  Regarding the differences in data types and levels, the current version of sw.wrangled data frame works well in my personal opinion. In contrast, the 'goal' version had variable types that do not make sense to me. For example, "gender" and "species" as "numeric", which is weird in my opinion so I am not going to try to match with it.
2.  Regarding the differences in "initials", the current version of sw.wrangled is ordered first by last names then by first names, however the "goal" version has "the Lesser" ranked after "Windu" which does not make sense to me. Therefore I am not going to try to match with the "goal" version.
3.  Regarding the differences in mean height, the two data sets actually have different height values. For example, in sw.wrangled, Pedme (roll 2)'s height is 165 cm, where as in sw.wrangled.goal, Pedme's height is 185 cm. Since I do not know which version is correct, I am not going to change these mismatches.

```{r}
#| label: Final version of code (all-in-one chunk)

sw.wrangled <- starwars %>%
  select(name, height, mass, hair_color, gender, species, homeworld) %>%
  rename(height_cm = height, hair = hair_color) %>%
  filter(!is.na(height_cm)) %>%
  separate(name, into = c("first_name", "last_name"), sep = " ", extra = "merge") %>%
  mutate(
    across(where(is.character), as.factor),
    height_in = height_cm * 0.39370,
    hair = fct_explicit_na(hair, na_level = "bald"),
    brown_hair = str_detect(tolower(hair), "brown"),
    gender = str_sub(gender, 1,1),
    species = str_to_upper(species),
    initials = if_else(
      is.na(last_name),
      str_c(str_sub(first_name, 1, 1), "NA"),
      str_c(str_sub(first_name, 1, 1), str_sub(last_name, 1, 1), sep = "")
    )
  ) %>%
  relocate(height_in, .before = height_cm) %>%
  relocate(initials, .after = last_name) %>%
  arrange(last_name, first_name)

```

# OPTIONAL: Unguided cleaning and transformation

*Optional:* If you have the time and interest, continue transforming this dataset as you please in a new dataframe called `sw.optional`. **DO NOT SAVE OVER YOUR `sw.wrangled` DATAFRAME.** Create new columns based on the existing ones, reformat strings, try your hand at a regex replacement, summarize by groups (factor levels), visualize a simple relationship, or anything else you can think of. You can do this in addition to or instead of the additional cleaning tasks above.

You can do these transformations one pipe/chunk or several. Either way, include appropriate chunk labels as well as comments to explain your thought process and the steps you are taking.

```{r}

#| label: rename-me-to-something-sensible

sw.optional <- sw.wrangled

```

#### I want to combine some *low-frequency species* in to a category called "other".


```{r}
sw.optional <- sw.optional %>%
  mutate(species = fct_lump(species, n = 3)) %>%


```

# OPTIONAL: Export/write your data to .csv

If you would like to export your dataframe(s) to a .csv file, you can use the `write_csv()` function from the `readr` package. This is not required, but can demonstrate the skill.

```{r}
#| label: export-data

# Write sw.wrangled to a .csv file

# Write sw.optional to a .csv file


```

# Submission

Before submitting, double check that your `sw.wrangled` dataframe matches the `sw.wrangled.goal` dataframe. If you optionally chose to continue transforming, that should be a *different dataframe.*

To submit:

1.  Add & modify the `assessment.md` in this mini-project's directory:
    1.  Check off all objectives you believe you have demonstrated
    2.  Indicate which objectives you are meeting for the first time (if any)
    3.  Complete any relevant open-ended items
2.  Push your changes to your centralized assignment repository on GitHub.
3.  Confirm that Dr. Dowling and your section TA are added as collaborators to your repository.
4.  Submit your work in your next open mini-project assignment by including the following information in the text box:
    1.  The title of the assignment: "Level 1 Data Wrangling: Recreate a starwars Dataset"
    2.  A link to the **directory** for this assignment in your centralized assignment repo
