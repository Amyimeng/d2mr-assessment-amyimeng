---
title: 'Assignment: Clean the starwars Dataset (Level 2)'
---

```{r}
library(tidyverse)
set.seed(1234)

# Create a messy version of the starwars dataset
messy_starwars <- dplyr::starwars %>% 
  # Rename and reorder columns
  select(` Name` = name,
         ` Height` = height,
         ` Weight` = mass,
         ` Hair Color` = hair_color,
         ` Skin Color` = skin_color,
         ` Eye Color` = eye_color,
         ` Birth Year` = birth_year,
         ` Gender` = gender,
         ` Homeworld` = homeworld,
         ` Species` = species) %>% 
  # Create a new column `BMI` by dividing ` Weight` by ` Height` squared and multiplying by 10000
  mutate(` BMI` = (` Weight` / (` Height` / 100) ^ 2)) %>%
  # Add random noise to ` Height`
  mutate(` Height` = ` Height` + sample(-5:5, size = n(), replace = TRUE)) %>%
  # Create random missing values
  mutate(` Weight` = ifelse(row_number() %% 10 == 0, NA, ` Weight`),
         ` Height` = ifelse(row_number() %% 15 == 0, NA, ` Height`),
         ` Hair Color` = ifelse(row_number() %% 20 == 0, NA, ` Hair Color`)) %>%
  # Make all columns character class using mutate(across())
  mutate(across(everything(), as.character)) %>%
  # Add some extra leading and trailing whitespace to some values in the ` Name` column
  mutate(` Name` = ifelse(row_number() %% 8 == 0, paste0(" ", ` Name`), ` Name`),
         ` Name` = ifelse(row_number() %% 11 == 0, paste0(` Name`, " "), ` Name`)) %>%
  # Mess with capitalization in the ` Species` column
  mutate(` Species` = ifelse(row_number() %% 17 == 0, toupper(` Species`), ` Species`))

# Save messy dataset as CSV (for distribution if needed)
write_csv(messy_starwars, "messy_starwars.csv")

```


```{r}

library(tidyverse)
library(stringr)
library(forcats)

# Load the messy dataset
messy_starwars <- read_csv("messy_starwars.csv")

# Clean the dataset
clean_starwars <- messy_starwars %>%
  # Remove unwanted spaces in the `Name` column
  mutate(`Name` = str_trim(`Name`)) %>%
  
  # Rename columns to match the original dataset
  rename(
    name = `Name`, 
    height = `Height`,
    mass = `Weight`,
    hair_color = `Hair Color`,
    skin_color = `Skin Color`,
    eye_color = `Eye Color`,
    birth_year = `Birth Year`,
    gender = `Gender`,
    homeworld = `Homeworld`,
    species = `Species`,
    bmi = `BMI`
  ) %>%
  
  # Reorder columns to match the original dataset
  select(name, height, mass, hair_color, skin_color, eye_color, birth_year, gender, homeworld, species, bmi) %>%
  
  # Correct variable data types
  mutate(across(c(height, mass, birth_year, bmi), as.numeric),
         gender = as.factor(gender),
         hair_color = as.factor(hair_color),
         skin_color = as.factor(skin_color),
         eye_color = as.factor(eye_color),
         species = as.factor(species),
         homeworld = as.factor(homeworld)) %>%
  
  # Impute missing values using BMI
  mutate(
    height = ifelse(is.na(height), sqrt(mass / bmi) * 100, height),
    mass = ifelse(is.na(mass), bmi * (height / 100)^2, mass)
  ) %>%
  
  # Remove BMI column
  select(-bmi) %>%
  
  # Round numeric values
  mutate(across(c(height, mass), ~ round(., 1))) %>%
  
  # Fix typos in species names
  mutate(species = str_replace_all(species, c("HUMAN " = "Human", "DROID " = "Droid")))

# Verify that the cleaned dataset matches the original starwars dataset
original_starwars <- dplyr::starwars %>%
  select(name, height, mass, hair_color, skin_color, eye_color, birth_year, gender, homeworld, species) %>%
  mutate(across(c(height, mass, birth_year), as.numeric),
         gender = as.factor(gender),
         hair_color = as.factor(hair_color),
         skin_color = as.factor(skin_color),
         eye_color = as.factor(eye_color),
         species = as.factor(species),
         homeworld = as.factor(homeworld))

identical(clean_starwars, original_starwars)

library(daff)
# Compare the cleaned dataset with the original starwars dataset
all.equal(clean_starwars, starwars)


```


